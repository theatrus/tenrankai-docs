{% comment %}
  Gallery Preview Partial
  Parameters:
    - gallery_name: (required) Name of the gallery to fetch preview from
    - gallery_url: (required) URL to the gallery for the "Explore Full Gallery" link
{% endcomment %}
<section class="gallery-preview-component" id="gallery-preview-component">
    <div class="preview-masonry" id="gallery-preview-grid">
        <div class="masonry-column" data-column="0"></div>
        <div class="masonry-column" data-column="1"></div>
    </div>
    <div class="preview-footer">
        <a href="{{ gallery_url }}" class="btn-explore">Explore Full Gallery â†’</a>
    </div>
</section>


<script>
// Client-side gallery preview masonry layout
(async function() {
    const previewGrid = document.getElementById('gallery-preview-grid');
    const previewComponent = document.getElementById('gallery-preview-component');
    
    if (!previewGrid || !previewComponent) return;
    
    let previewImages;
    try {
        // Fetch gallery preview data from API
        const galleryName = '{{ gallery_name }}';
        if (!galleryName) {
            console.error('Gallery name is required for gallery preview');
            previewComponent.style.display = 'none';
            return;
        }
        const apiUrl = `/api/gallery/${galleryName}/preview`;
        const response = await fetch(apiUrl);
        if (!response.ok) {
            console.error('Failed to fetch gallery preview:', response.status);
            previewComponent.style.display = 'none';
            return;
        }
        const data = await response.json();
        previewImages = data.images;
        
        // Hide the component if no images
        if (!previewImages || previewImages.length === 0) {
            previewComponent.style.display = 'none';
            return;
        }
    } catch (e) {
        console.error('Failed to fetch gallery preview data:', e);
        previewComponent.style.display = 'none';
        return;
    }
    
    function calculatePreviewColumnWidth() {
        const viewportWidth = window.innerWidth;
        const previewGrid = document.getElementById('gallery-preview-grid');
        
        // Get the actual container width from the DOM
        const containerRect = previewGrid.getBoundingClientRect();
        const containerWidth = containerRect.width || Math.min(viewportWidth, 1200);
        
        // iOS-specific viewport handling
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const gap = 24; // 1.5rem
        
        if (viewportWidth <= 768) {
            // Mobile: single column centered with balanced width
            // Use actual container width to account for any padding/margins
            const horizontalPadding = 32; // 1rem on each side
            const availableWidth = Math.min(viewportWidth - (horizontalPadding * 2), containerWidth);
            // Use 85% of available width for better balance
            return Math.floor(availableWidth);
        } else {
            // Desktop: two columns
            const desktopPadding = isIOS ? 32 : 40;
            return (containerWidth - desktopPadding - gap) / 2;
        }
    }
    
    function calculatePreviewDisplayDimensions(originalWidth, originalHeight, maxWidth) {
        if (originalWidth <= maxWidth) {
            return { width: originalWidth, height: originalHeight };
        } else {
            const ratio = maxWidth / originalWidth;
            return { 
                width: maxWidth, 
                height: Math.round(originalHeight * ratio)
            };
        }
    }
    
    function createPreviewImageElement(image, displayDimensions) {
        const cleanName = image.name
            .replace(/\./g, '')
            .replace(/\s/g, '')
            .replace(/-/g, '')
            .replace(/_/g, '');
        
        const link = document.createElement('a');
        const galleryBaseUrl = '{{ gallery_url }}';
        link.href = galleryBaseUrl + '/' + image.parent_path + '#' + cleanName;
        link.className = 'preview-item image-preview-item' + (image.is_new ? ' is-new' : '');
        link.style.width = displayDimensions.width + 'px';
        link.style.display = 'inline-block';
        // Add data attribute for reliable identification during replacement
        link.dataset.imagePath = image.path;
        
        const imageDiv = document.createElement('div');
        imageDiv.className = 'preview-image';
        imageDiv.style.width = displayDimensions.width + 'px';
        imageDiv.style.height = displayDimensions.height + 'px';
        imageDiv.style.backgroundColor = 'transparent';
        
        const img = document.createElement('img');
        const baseUrl = image.gallery_url || image.thumbnail_url;
        img.src = baseUrl;
        
        // Add srcset for high-DPI displays
        if (baseUrl) {
            const url2x = baseUrl.replace('?size=gallery', '?size=gallery@2x')
                                 .replace('?size=thumbnail', '?size=thumbnail@2x');
            img.srcset = `${baseUrl} 1x, ${url2x} 2x`;
        }
        
        img.alt = image.name;
        img.width = displayDimensions.width;
        img.height = displayDimensions.height;
        img.style.width = displayDimensions.width + 'px';
        img.style.height = displayDimensions.height + 'px';
        img.style.objectFit = 'cover';
        img.style.display = 'block';
        
        imageDiv.appendChild(img);
        link.appendChild(imageDiv);
        
        return link;
    }
    
    function layoutPreviewMasonry() {
        const columnWidth = calculatePreviewColumnWidth();
        const viewportWidth = window.innerWidth;
        const numColumns = viewportWidth <= 768 ? 1 : 2;
        
        // Clear existing content
        const columns = previewGrid.querySelectorAll('.masonry-column');
        columns.forEach(col => col.innerHTML = '');
        
        // Hide/show columns based on viewport
        columns[0].style.display = 'flex';
        if (columns[1]) {
            columns[1].style.display = numColumns > 1 ? 'flex' : 'none';
        }
        
        // Track column heights
        const columnHeights = new Array(numColumns).fill(0);
        
        // Process each image using actual dimensions
        previewImages.forEach(image => {
            let displayDimensions;
            
            if (image.dimensions && image.dimensions.length === 2) {
                // Use actual image dimensions
                displayDimensions = calculatePreviewDisplayDimensions(
                    image.dimensions[0], 
                    image.dimensions[1], 
                    columnWidth
                );
            } else {
                // Fallback to square estimation if dimensions not available
                displayDimensions = { width: columnWidth, height: columnWidth };
            }
            
            // Find shortest column
            const shortestColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));
            
            // Create and append image element
            const imageElement = createPreviewImageElement(image, displayDimensions);
            columns[shortestColumnIndex].appendChild(imageElement);
            
            // Update column height
            columnHeights[shortestColumnIndex] += displayDimensions.height + 24; // gap
        });
    }
    
    // Initial layout
    layoutPreviewMasonry();
    
    // Handle window resize with debouncing
    let resizeTimeout;
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    
    function handlePreviewResize() {
        clearTimeout(resizeTimeout);
        // Use longer timeout for iOS due to viewport changes during scroll
        const timeout = isIOS ? 300 : 150;
        resizeTimeout = setTimeout(layoutPreviewMasonry, timeout);
    }
    
    window.addEventListener('resize', handlePreviewResize);
    
    // iOS-specific: Handle orientation changes
    if (isIOS) {
        window.addEventListener('orientationchange', function() {
            setTimeout(layoutPreviewMasonry, 500); // Delay for iOS orientation animation
        });
    }
    
    // Dynamic image replacement functionality
    let allAvailableImages = [...previewImages]; // Copy initial images
    let imageReplacementInterval;
    
    async function fetchMoreImages() {
        try {
            const galleryName = '{{ gallery_name }}';
            const apiUrl = `/api/gallery/${galleryName}/preview?count=20`;
            const response = await fetch(apiUrl);
            if (!response.ok) {
                console.error('Failed to fetch more gallery images:', response.status);
                return [];
            }
            const data = await response.json();
            // Reduce logging noise in production
            return data.images || [];
        } catch (e) {
            console.error('Error fetching more gallery images:', e);
            return [];
        }
    }
    
    function replaceRandomImage(newImage) {
        if (previewImages.length === 0) return;
        
        // Find a random image to replace (avoid replacing with the same image)
        const availableIndices = previewImages
            .map((img, index) => ({ img, index }))
            .filter(item => item.img.path !== newImage.path)
            .map(item => item.index);
            
        if (availableIndices.length === 0) return;
        
        const randomIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)];
        const oldImage = previewImages[randomIndex];
        
        // Find the DOM element to replace - use data attribute for reliable identification
        const columns = previewGrid.querySelectorAll('.masonry-column');
        let elementToReplace = null;
        
        // First try to find by data attribute if it exists
        for (const column of columns) {
            const links = column.querySelectorAll('a[data-image-path]');
            for (const link of links) {
                if (link.dataset.imagePath === oldImage.path) {
                    elementToReplace = link;
                    break;
                }
            }
            if (elementToReplace) break;
        }
        
        // Fallback: find by URL comparison (more robust)
        if (!elementToReplace) {
            for (const column of columns) {
                const links = column.querySelectorAll('a');
                for (const link of links) {
                    // Extract path from href more carefully
                    const hrefPath = decodeURIComponent(link.href.split('/gallery/')[1]?.split('#')[0] || '');
                    if (hrefPath === oldImage.path || link.href.includes(encodeURIComponent(oldImage.path))) {
                        elementToReplace = link;
                        break;
                    }
                }
                if (elementToReplace) break;
            }
        }
        
        if (elementToReplace) {
            // Calculate display dimensions for new image
            const columnWidth = calculatePreviewColumnWidth();
            let displayDimensions;
            
            if (newImage.dimensions && newImage.dimensions.length === 2) {
                displayDimensions = calculatePreviewDisplayDimensions(
                    newImage.dimensions[0], 
                    newImage.dimensions[1], 
                    columnWidth
                );
            } else {
                displayDimensions = { width: columnWidth, height: columnWidth };
            }
            
            // Create new image element
            const newImageElement = createPreviewImageElement(newImage, displayDimensions);
            
            // Add fade transition
            elementToReplace.style.opacity = '0';
            elementToReplace.style.transition = 'opacity 0.5s ease-in-out';
            
            setTimeout(() => {
                try {
                    // Replace the element
                    elementToReplace.parentNode.replaceChild(newImageElement, elementToReplace);
                    
                    // Fade in new image
                    newImageElement.style.opacity = '0';
                    newImageElement.style.transition = 'opacity 0.5s ease-in-out';
                    
                    // Force a reflow to ensure the opacity is set before animation
                    newImageElement.offsetHeight;
                    
                    setTimeout(() => {
                        newImageElement.style.opacity = '1';
                    }, 50);
                    
                    // Update the previewImages array
                    previewImages[randomIndex] = newImage;
                    
                } catch (error) {
                    console.error('Error during image replacement:', error);
                }
            }, 500);
        }
    }
    
    async function startDynamicReplacement() {
        // Fetch more images to have a pool to choose from
        const moreImages = await fetchMoreImages();
        
        if (moreImages.length > previewImages.length) {
            // Add new images to our pool (excluding ones we already have)
            const currentPaths = new Set(previewImages.map(img => img.path));
            const newImages = moreImages.filter(img => !currentPaths.has(img.path));
            allAvailableImages = [...allAvailableImages, ...newImages];
        }
        
        // Set up periodic replacement
        imageReplacementInterval = setInterval(async () => {
            // Get fresh images periodically
            if (Math.random() < 0.3) { // 30% chance to fetch fresh images
                const freshImages = await fetchMoreImages();
                const currentPaths = new Set(allAvailableImages.map(img => img.path));
                const newFreshImages = freshImages.filter(img => !currentPaths.has(img.path));
                if (newFreshImages.length > 0) {
                    allAvailableImages = [...allAvailableImages, ...newFreshImages];
                }
            }
            
            // Select a random image from our pool (excluding currently displayed ones)
            const currentlyDisplayed = new Set(previewImages.map(img => img.path));
            const availableForReplacement = allAvailableImages.filter(img => !currentlyDisplayed.has(img.path));
            
            if (availableForReplacement.length > 0) {
                const randomNewImage = availableForReplacement[Math.floor(Math.random() * availableForReplacement.length)];
                replaceRandomImage(randomNewImage);
            }
        }, 10000 + Math.random() * 5000); // 10-15 seconds
    }
    
    // Start the dynamic replacement after initial layout
    setTimeout(startDynamicReplacement, 2000); // Wait 2 seconds after initial load
    
    // Clean up interval when page is unloaded
    window.addEventListener('beforeunload', () => {
        if (imageReplacementInterval) {
            clearInterval(imageReplacementInterval);
        }
    });
})();
</script>
