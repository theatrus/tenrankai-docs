{% assign page_title = image.name %}
{% assign meta_description = image.description | default: "View this image on theatr.us gallery" | strip_html | truncate: 160 %}

{% comment %} Open Graph tags for image {% endcomment %}
{% assign og_title = image.name %}
{% assign og_description = meta_description %}
{% assign og_image = base_url | append: image.gallery_url %}
{% if image.dimensions %}
    {% assign og_image_width = image.dimensions[0] %}
    {% assign og_image_height = image.dimensions[1] %}
{% endif %}
{% assign og_type = "article" %}
{% assign og_url = base_url | append: gallery_url | append: "/detail/" | append: image.path %}

{% comment %} Twitter Card tags {% endcomment %}
{% assign twitter_card_type = "summary_large_image" %}
{% assign twitter_title = image.name %}
{% assign twitter_description = meta_description %}
{% assign twitter_image = og_image %}
{% assign page_css = "image-detail.css" | split: "," %}

{% include "_header.html.liquid" %}

<div class="container container-lg image-detail-container">
    <nav class="gallery-nav">
        {% for crumb in breadcrumbs %}
            {% unless forloop.first %}
                <span class="nav-separator">→</span>
            {% endunless %}
            {% if crumb.is_current %}
                <span class="nav-current">{{ crumb.display_name }}</span>
            {% else %}
                <a href="{{ gallery_url }}{% if crumb.path != "" %}/{{ crumb.path }}{% endif %}" class="nav-link">{{ crumb.display_name }}</a>
            {% endif %}
        {% endfor %}
        <span class="nav-separator">→</span>
        <span class="nav-current">{{ image.name }}</span>
    </nav>

    <div class="image-detail-content">
        <div class="image-main">
            <div class="image-container" {% if image.dimensions %}style="aspect-ratio: {{ image.dimensions[0] }} / {{ image.dimensions[1] }};"{% endif %}>
                <img src="{{ image.medium_url }}" 
                     srcset="{{ image.medium_url }} 1x, {{ image.medium_url | replace: '?size=medium', '?size=medium@2x' }} 2x" 
                     alt="{{ image.name }}" 
                     id="main-image"
                     {% if image.dimensions %}
                     width="{{ image.dimensions[0] }}"
                     height="{{ image.dimensions[1] }}"
                     {% endif %}
                     loading="eager">
            </div>
            
            <!-- Image Navigation Bar -->
            {% if prev_image or next_image %}
                <div class="image-navigation">
                    {% if prev_image %}
                        <a href="{{ gallery_url }}/detail/{{ prev_image.path }}" class="nav-item nav-prev" title="Previous: {{ prev_image.name }}">
                            <div class="nav-thumbnail">
                                <img src="{{ prev_image.thumbnail_url }}" srcset="{{ prev_image.thumbnail_url }} 1x, {{ prev_image.thumbnail_url | replace: '?size=thumbnail', '?size=thumbnail@2x' }} 2x" alt="{{ prev_image.name }}">
                            </div>
                            <div class="nav-info">
                                <div class="nav-direction">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <polyline points="15,18 9,12 15,6"></polyline>
                                    </svg>
                                    Previous
                                </div>
                                <div class="nav-filename">{{ prev_image.name }}</div>
                            </div>
                        </a>
                    {% else %}
                        <div class="nav-spacer"></div>
                    {% endif %}
                    
                    {% if next_image %}
                        <a href="{{ gallery_url }}/detail/{{ next_image.path }}" class="nav-item nav-next" title="Next: {{ next_image.name }}">
                            <div class="nav-info">
                                <div class="nav-direction">
                                    Next
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <polyline points="9,6 15,12 9,18"></polyline>
                                    </svg>
                                </div>
                                <div class="nav-filename">{{ next_image.name }}</div>
                            </div>
                            <div class="nav-thumbnail">
                                <img src="{{ next_image.thumbnail_url }}" srcset="{{ next_image.thumbnail_url }} 1x, {{ next_image.thumbnail_url | replace: '?size=thumbnail', '?size=thumbnail@2x' }} 2x" alt="{{ next_image.name }}">
                            </div>
                        </a>
                    {% else %}
                        <div class="nav-spacer"></div>
                    {% endif %}
                </div>
            {% endif %}
            
            <div class="image-controls">
                <div class="control-buttons" id="control-buttons">
                    <!-- Buttons will be populated by JavaScript based on cookie -->
                </div>
                {% if prev_image or next_image %}
                    <div class="nav-hint-container">
                        {% if prev_image and next_image %}
                            <span class="nav-hint">Use ← → keys to navigate between images</span>
                        {% elsif prev_image %}
                            <span class="nav-hint">Use ← key to go to previous image</span>
                        {% elsif next_image %}
                            <span class="nav-hint">Use → key to go to next image</span>
                        {% endif %}
                    </div>
                {% endif %}
            </div>
        </div>
        
        <div class="image-info">
            <h2>{{ image.name }}</h2>
            
            {% if image.description %}
                <div class="image-description">
                    <h3>Description</h3>
                    {{ image.description }}
                </div>
            {% endif %}
            
            <div class="image-metadata card">
                <h3>Image Information</h3>
                <dl>
                    {% if image.capture_date %}
                        <dt>Capture Date</dt>
                        <dd>{{ image.capture_date }}</dd>
                    {% endif %}
                    
                    <dt>Dimensions</dt>
                    <dd>
                        {{ image.dimensions[0] }} × {{ image.dimensions[1] }} pixels
                        {% assign total_pixels = image.dimensions[0] | times: image.dimensions[1] %}
                        {% assign megapixels = total_pixels | divided_by: 1000000.0 | round %}
                        ({{ megapixels }} MP)
                    </dd>
                    
                    <dt>File Size</dt>
                    <dd>{{ image.file_size | divided_by: 1024 | divided_by: 1024 | round: 2 }} MB</dd>
                </dl>
            </div>
            
            {% if image.camera_info %}
                <div class="camera-info card">
                    <h3>Camera Information</h3>
                    <dl>
                        {% if image.camera_info.camera_make or image.camera_info.camera_model %}
                            <dt>Camera</dt>
                            <dd>
                                {% if image.camera_info.camera_make %}{{ image.camera_info.camera_make }}{% endif %}
                                {% if image.camera_info.camera_make and image.camera_info.camera_model %} {% endif %}
                                {% if image.camera_info.camera_model %}{{ image.camera_info.camera_model }}{% endif %}
                            </dd>
                        {% endif %}
                        
                        {% if image.camera_info.lens_model %}
                            <dt>Lens</dt>
                            <dd>{{ image.camera_info.lens_model }}</dd>
                        {% endif %}
                        
                        {% if image.camera_info.focal_length %}
                            <dt>Focal Length</dt>
                            <dd>{{ image.camera_info.focal_length }}</dd>
                        {% endif %}
                        
                        {% if image.camera_info.aperture %}
                            <dt>Aperture</dt>
                            <dd>{{ image.camera_info.aperture }}</dd>
                        {% endif %}
                        
                        {% if image.camera_info.shutter_speed %}
                            <dt>Shutter Speed</dt>
                            <dd>{{ image.camera_info.shutter_speed }}</dd>
                        {% endif %}
                        
                        {% if image.camera_info.iso %}
                            <dt>ISO</dt>
                            <dd>{{ image.camera_info.iso }}</dd>
                        {% endif %}
                    </dl>
                </div>
            {% endif %}
            
            {% if image.location_info %}
                <div class="location-info card">
                    <h3>Location</h3>
                    <div class="location-content">
                        <div class="coordinates">
                            <span class="coord-label">Coordinates:</span>
                            <span class="coordinates-text">{{ image.location_info.latitude | round: 6 }}, {{ image.location_info.longitude | round: 6 }}</span>
                        </div>
                        
                        <div class="map-links">
                            <a href="{{ image.location_info.google_maps_url }}" target="_blank" class="map-link google-maps">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M21,3V5H19V3H21M19,7H21V9H19V7M19,11H21V13H19V11M19,15H21V17H19V15M19,19H21V21H19V19M17,21V19H15V21H17M13,21V19H11V21H13M9,21V19H7V21H9M5,21V19H3V21H5M3,17V15H5V17H3M3,13V11H5V13H3M3,9V7H5V9H3M3,5V3H5V5H3M7,5V3H9V5H7M11,5V3H13V5H11M15,5V3H17V5H15"/>
                                </svg>
                                Google Maps
                            </a>
                            <a href="{{ image.location_info.apple_maps_url }}" target="_blank" class="map-link apple-maps">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z"/>
                                </svg>
                                Apple Maps
                            </a>
                        </div>
                        
                        <div class="embedded-map">
                            <iframe 
                                src="https://www.openstreetmap.org/export/embed.html?bbox={{ image.location_info.longitude | minus: 0.01 }}%2C{{ image.location_info.latitude | minus: 0.01 }}%2C{{ image.location_info.longitude | plus: 0.01 }}%2C{{ image.location_info.latitude | plus: 0.01 }}&layer=mapnik&marker={{ image.location_info.latitude }}%2C{{ image.location_info.longitude }}"
                                width="100%"
                                height="200"
                                frameborder="0"
                                loading="lazy">
                            </iframe>
                        </div>
                    </div>
                </div>
            {% endif %}
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
    const mainImage = document.getElementById('main-image');
    const imageContainer = mainImage.closest('.image-container');
    
    // Add loading class initially
    imageContainer.classList.add('loading');
    
    // Remove loading class when image is loaded
    if (mainImage.complete && mainImage.naturalHeight !== 0) {
        imageContainer.classList.remove('loading');
    } else {
        mainImage.addEventListener('load', function() {
            imageContainer.classList.remove('loading');
        });
        
        mainImage.addEventListener('error', function() {
            imageContainer.classList.remove('loading');
        });
    }
    
    // Check download permission via API and populate buttons
    async function checkDownloadPermission() {
        try {
            const response = await fetch('/api/verify');
            const data = await response.json();
            return data.authorized;
        } catch (error) {
            console.error('Error checking download permission:', error);
            return false;
        }
    }
    
    async function setupControls() {
        const hasDownloadPermission = await checkDownloadPermission();
        const controlButtons = document.getElementById('control-buttons');
        
        if (hasDownloadPermission) {
            controlButtons.innerHTML = `
                <a href="{{ image.url }}" target="_blank" class="btn">View Full Size</a>
                <a href="{{ image.url }}" download="{{ image.name }}" class="btn">Download</a>
            `;
            
            mainImage.addEventListener('click', function() {
                window.open(this.src.replace('?size=medium', ''), '_blank');
            });
            mainImage.style.cursor = 'pointer';
        } else {
            controlButtons.innerHTML = `
                <a href="{{ image.medium_url }}" target="_blank" class="btn">View Medium Size</a>
                <button class="btn" onclick="requestDownloadAccess()">Request Download Access</button>
            `;
            
            mainImage.addEventListener('click', function() {
                window.open('{{ image.medium_url }}', '_blank');
            });
            mainImage.style.cursor = 'pointer';
        }
    }
    
    // Function to request download access via API
    window.requestDownloadAccess = async function() {
        const password = prompt('Enter download password:');
        if (password === null) return; // User cancelled
        
        try {
            const response = await fetch('/api/auth', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ password: password })
            });
            
            const data = await response.json();
            
            if (data.success) {
                alert('Access granted! Reloading page...');
                location.reload();
            } else {
                alert(data.message || 'Authentication failed');
            }
        } catch (error) {
            console.error('Error during authentication:', error);
            alert('Authentication request failed');
        }
    };
    
    // Initialize controls
    setupControls();
    
    // Keyboard navigation
    document.addEventListener('keydown', function(e) {
        {% if prev_image %}
        if (e.key === 'ArrowLeft') {
            e.preventDefault();
            window.location.href = '{{ gallery_url }}/detail/{{ prev_image.path }}';
        }
        {% endif %}
        
        {% if next_image %}
        if (e.key === 'ArrowRight') {
            e.preventDefault();
            window.location.href = '{{ gallery_url }}/detail/{{ next_image.path }}';
        }
        {% endif %}
        
        // ESC to go back to gallery
        if (e.key === 'Escape') {
            e.preventDefault();
            {% assign path_parts = image.path | split: "/" %}
            {% assign gallery_path = "" %}
            {% for part in path_parts %}
                {% unless forloop.last %}
                    {% if gallery_path == "" %}
                        {% assign gallery_path = part %}
                    {% else %}
                        {% assign gallery_path = gallery_path | append: "/" | append: part %}
                    {% endif %}
                {% endunless %}
            {% endfor %}
            window.location.href = '{{ gallery_url }}/{{ gallery_path }}';
        }
    });
    
    // Preload adjacent images for faster navigation
    {% if prev_image %}
    const prevImg = new Image();
    prevImg.src = '{{ gallery_url }}/image/{{ prev_image.path }}?size=medium';
    {% endif %}
    
    {% if next_image %}
    const nextImg = new Image();
    nextImg.src = '{{ gallery_url }}/image/{{ next_image.path }}?size=medium';
    {% endif %}
});
</script>

{% include "_footer.html.liquid" %}
