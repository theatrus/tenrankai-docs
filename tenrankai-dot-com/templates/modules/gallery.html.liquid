{% if folder_title %}
    {% assign page_title = folder_title %}
{% else %}
    {% assign page_title = "Gallery" %}
{% endif %}
{% assign meta_description = folder_description | default: "Browse the photo gallery on theatr.us" | strip_html | truncate: 160 %}
{% include "_header.html.liquid" %}

<div class="container gallery-container">
    <!-- Navigation Breadcrumb -->
    <nav class="gallery-nav">
        {% for crumb in breadcrumbs %}
            {% unless forloop.first %}
                <span class="nav-separator">‚Üí</span>
            {% endunless %}
            {% if crumb.is_current %}
                <span class="nav-current">{{ crumb.display_name }}</span>
            {% else %}
                <a href="{{ gallery_url }}{% if crumb.path != "" %}/{{ crumb.path }}{% endif %}" class="nav-link">{{ crumb.display_name }}</a>
            {% endif %}
        {% endfor %}
    </nav>

    {% if folder_title %}
        <h2>{{ folder_title }}</h2>
    {% else %}
        <h2>Photo Gallery{% if gallery_path != "" %}: {{ gallery_path }}{% endif %}</h2>
    {% endif %}
    
    {% if folder_description %}
        <div class="folder-description">
            {{ folder_description }}
        </div>
    {% endif %}
    
    {% if items.size > 0 %}
        <!-- Directory Navigation -->
        {% assign directories = items | where: "is_directory", true %}
        {% if directories.size > 0 %}
            <div class="gallery-folders">
                <h3>Folders</h3>
                <div class="folder-grid">
                    {% for dir in directories %}
                        <a href="{{ gallery_url }}/{{ dir.path }}" class="folder-item">
                            <div class="folder-preview">
                                {% if dir.preview_images and dir.preview_images.size > 0 %}
                                    <div class="preview-images">
                                        {% for image_url in dir.preview_images limit: 4 %}
                                            <img src="{{ image_url }}" alt="Preview" loading="lazy" class="preview-img preview-img-{{ forloop.index }}">
                                        {% endfor %}
                                    </div>
                                {% else %}
                                    <div class="folder-icon">üìÅ</div>
                                {% endif %}
                            </div>
                            <div class="folder-info">
                                <div class="folder-name">
                                    {% if dir.display_name %}
                                        {{ dir.display_name }}
                                    {% else %}
                                        {{ dir.name }}
                                    {% endif %}
                                </div>
                                <div class="folder-count">{{ dir.item_count }} images</div>
                                {% if dir.description %}
                                    <div class="folder-description-preview">{{ dir.description | strip_html | truncate: 100 }}</div>
                                {% endif %}
                            </div>
                        </a>
                    {% endfor %}
                </div>
            </div>
        {% endif %}
        
        <!-- Image Gallery -->
        {% if images.size > 0 %}
            <div class="gallery-images">
                <h3>Images</h3>
                <div class="image-grid" id="gallery-grid">
                    <div class="masonry-column" data-column="0"></div>
                    <div class="masonry-column" data-column="1"></div>
                </div>
                
                <!-- Hidden template for images -->
                <script type="application/json" id="gallery-images">
{{ images_json }}
                </script>
                
                <!-- Pagination -->
                {% if total_pages > 1 %}
                    <div class="gallery-pagination">
                        {% if has_prev %}
                            <a href="?page={{ prev_page }}" class="page-link">‚Üê Previous</a>
                        {% endif %}
                        
                        <span class="page-info">Page {{ current_page | plus: 1 }} of {{ total_pages }}</span>
                        
                        {% if has_next %}
                            <a href="?page={{ next_page }}" class="page-link">Next ‚Üí</a>
                        {% endif %}
                    </div>
                {% endif %}
            </div>
        {% endif %}
    {% else %}
        <p class="empty-gallery">No images found in this directory.</p>
    {% endif %}
</div>


<script>
// Client-side masonry layout
(function() {
    const galleryGrid = document.getElementById('gallery-grid');
    const imagesDataElement = document.getElementById('gallery-images');
    
    if (!galleryGrid || !imagesDataElement) return;
    
    let images;
    try {
        images = JSON.parse(imagesDataElement.textContent);
    } catch (e) {
        console.error('Failed to parse gallery images data:', e);
        return;
    }
    
    function calculateColumnWidth() {
        const viewportWidth = window.innerWidth;
        const containerWidth = Math.min(viewportWidth, 1200);
        
        // iOS-specific viewport handling
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const gap = 24; // 1.5rem
        
        if (viewportWidth <= 768) {
            // Mobile: single column with minimal padding
            const mobilePadding = isIOS ? 16 : 20; // Much less padding for mobile
            return containerWidth - mobilePadding;
        } else {
            // Desktop: two columns
            const desktopPadding = isIOS ? 32 : 40;
            return (containerWidth - desktopPadding - gap) / 2;
        }
    }
    
    function calculateDisplayDimensions(originalWidth, originalHeight, maxWidth) {
        if (originalWidth <= maxWidth) {
            return { width: originalWidth, height: originalHeight };
        } else {
            const ratio = maxWidth / originalWidth;
            return { 
                width: maxWidth, 
                height: Math.round(originalHeight * ratio)
            };
        }
    }
    
    function createImageElement(image, displayDimensions) {
        const cleanName = image.name
            .replace(/\./g, '')
            .replace(/\s/g, '')
            .replace(/-/g, '')
            .replace(/_/g, '');
        
        const itemDiv = document.createElement('div');
        itemDiv.className = 'image-item' + (image.is_new ? ' is-new' : '');
        itemDiv.id = cleanName;
        itemDiv.setAttribute('data-path', image.path);
        itemDiv.style.width = displayDimensions.width + 'px';
        itemDiv.style.height = displayDimensions.height + 'px';
        
        const link = document.createElement('a');
        link.href = '{{ gallery_url }}/detail/' + image.path;
        link.className = 'image-link';
        
        const img = document.createElement('img');
        img.src = image.gallery_url;
        img.srcset = `${image.gallery_url} 1x, ${image.gallery_url}@2x 2x`;
        img.alt = image.name;
        img.width = displayDimensions.width;
        img.height = displayDimensions.height;
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        
        link.appendChild(img);
        itemDiv.appendChild(link);
        
        return itemDiv;
    }
    
    function layoutMasonry() {
        const columnWidth = calculateColumnWidth();
        const viewportWidth = window.innerWidth;
        const numColumns = viewportWidth <= 768 ? 1 : 2;
        
        // Clear existing content
        const columns = galleryGrid.querySelectorAll('.masonry-column');
        columns.forEach(col => col.innerHTML = '');
        
        // Hide/show columns based on viewport
        columns[0].style.display = 'flex';
        if (columns[1]) {
            columns[1].style.display = numColumns > 1 ? 'flex' : 'none';
        }
        
        // Track column heights
        const columnHeights = new Array(numColumns).fill(0);
        
        // Process each image
        images.forEach(image => {
            // Use default dimensions if not available
            const width = image.dimensions ? image.dimensions[0] : 800;
            const height = image.dimensions ? image.dimensions[1] : 600;
            
            const displayDimensions = calculateDisplayDimensions(
                width, 
                height, 
                columnWidth
            );
            
            // Find shortest column
            const shortestColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));
            
            // Create and append image element
            const imageElement = createImageElement(image, displayDimensions);
            columns[shortestColumnIndex].appendChild(imageElement);
            
            // Update column height
            columnHeights[shortestColumnIndex] += displayDimensions.height + 24; // gap
        });
    }
    
    // Initial layout
    layoutMasonry();
    
    // Handle window resize with debouncing
    let resizeTimeout;
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    
    function handleResize() {
        clearTimeout(resizeTimeout);
        // Use longer timeout for iOS due to viewport changes during scroll
        const timeout = isIOS ? 300 : 150;
        resizeTimeout = setTimeout(layoutMasonry, timeout);
    }
    
    window.addEventListener('resize', handleResize);
    
    // iOS-specific: Handle orientation changes
    if (isIOS) {
        window.addEventListener('orientationchange', function() {
            setTimeout(layoutMasonry, 500); // Delay for iOS orientation animation
        });
    }
    
    // Handle anchor links after layout is complete
    if (window.location.hash) {
        setTimeout(() => {
            const targetElement = document.getElementById(window.location.hash.substring(1));
            if (targetElement) {
                targetElement.scrollIntoView({ behavior: 'smooth' });
            }
        }, 100);
    }
})();
</script>

{% include "_footer.html.liquid" %}